#!/usr/bin/env bash
# Author: qaraluch - 12.2019 - MIT

readonly _pArgs="$@"
readonly _pName=$(basename $0)
readonly _pDel="[ ${_pName} ]"

printUsage() {
  cat <<EOL

  Help:
  ---------
  ${_cy}${_pName}${_ce} - add window to tmux session.

  Usage:
    ${_pName} ${_cy}< name > [path]${_ce}              - creats tmux window inside of session in passed path dir
                                            if [path] is not passed then path dir is set to home dir.
  Flags:
    -r / --remotely <sessionName>         - creates window from outside of tmux

EOL
  exit ${1:-1}
}

# CLI
parseOptions() {
	while [[ $# -gt 0 ]] ; do
		flag="$1"
		case $flag in
			-h|--help)
				printUsage
				;;
			-r|--remotely)
				remotelyFlag='Y'
        sessionName="$2"
				shift
				shift
				;;
			*)
				positional+=("$1")
				shift
				;;
		esac
	done
}

main() {
  local remotelyFlag='N'
  local sessionName
	local positional=()
	parseOptions $_pArgs
	set -- "${positional[@]}"

	local windowName="$1"
  local path=${2:-$HOME}

  checkIfNamePassed

  AboutDoneScript

  if _switchY "${remotelyFlag}" ; then
    createTmuxWindowRemotely
  else
    createTmuxWindow
  fi
}

AboutDoneScript() {
	_echoIt "About to created new window named: "${windowName}" in path dir: "${path}"" && \
  if _switchY "${remotelyFlag}" ; then
    _echoIt "   ... in session: ${sessionName}"
  fi
  sleep 1
}

checkIfNamePassed() {
	if _isStringEmpty "${windowName}" ; then
		_errorExit "Not passed new tmux window name. Abort!"
	fi
}

createTmuxWindow() {
	tmux new-window -a -n "${windowName}"
	tmux send-keys "cd ${path}" C-m
	tmux send-keys 'clear' C-m
}

createTmuxWindowRemotely() {
	tmux new-window -a -t "${sessionName}" -n "${windowName}"
  # -a flag appends last number of the window
	tmux send-keys "cd ${path}" C-m
	tmux send-keys 'clear' C-m
}

# Utils:
readonly _cy=$'\033[1;33m'            # color yellow
readonly _cg=$'\033[1;32m'            # color green
readonly _ce=$'\033[0m'               # color end
readonly _cr=$'\033[0;31m'            # color red
readonly _it="[ ${_cg}✔${_ce} ]"      # icon tick
readonly _ic="[ ${_cr}✖${_ce} ]"      # icon cross

_echoItConstructor() {
  local delimiter=$1 ; local msg=$2 ; local icon=${3:-''} ; echo "${delimiter}${icon} $msg" >&2
}

_echoIt() {
   _echoItConstructor "$_pDel" "${1}" "${2}"
}

_errorExitConstructor() {
  local delimiter=$1 ; local msg=$2 ; local icon=${3:-"$_ic"} ; echo "${delimiter}${icon} ${msg}" 1>&2 ; exit 1
}

_errorExit() {
  _errorExitConstructor "${_pDel}" "${1}"
}

_isStringEmpty() {
  local var=$1
  [[ -z $var ]]
}

# Switches
_isStringEqualY() {
  local string=$1
  [[ "$string" == "Y" ]]
}

_switchY() {
  local switch=$1
  if _isStringEqualY $switch; then
    return 0
  else
    return 1
  fi
}

main
