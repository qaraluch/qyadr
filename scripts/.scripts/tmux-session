#!/usr/bin/env bash
# Author: qaraluch - 12.2019 - MIT

readonly _pArgs="$@"
readonly _pName=$(basename $0)
readonly _pDel="[ ${_pName} ]"

printUsage() {
  cat <<EOL

  Help:
  ---------
  ${_cy}${_pName}${_ce} - creates tmux session.

  Usage:
    ${_pName} ${_cy}[ name ]${_ce}              - creats tmux session from named preset

  List of presets:
    - bashdev   - shell scripting dev
    - linux     - dealing with linux new stuff
    - f-mgmt    - photo managment
    - ytd-mgmt  - ytd managment
    - tiljs     - til for js
    - ramka     - project: ramka dev
    - react     - react.js learning

EOL
  exit ${1:-1}
}

# CLI
parseOptions() {
	while [[ $# -gt 0 ]] ; do
		flag="$1"
		case $flag in
			-h|--help)
				printUsage
				;;
			*)
				positional+=("$1")
				shift
				;;
		esac
	done
}

main() {
	local positional=()
	parseOptions $_pArgs
	set -- "${positional[@]}"

	local presetName="$1"

	checkIfNamePassed

	if _isStringEqual "${presetName}" 'bashdev' ; then
		createTmuxSession_bashdev && doneScript
	elif _isStringEqual "${presetName}" 'linux' ; then
		createTmuxSession_linux && doneScript
	elif _isStringEqual "${presetName}" 'tiljs' ; then
		createTmuxSession_tiljs && doneScript
	elif _isStringEqual "${presetName}" 'f-mgmt' ; then
		createTmuxSession_f-mgmt && doneScript
	elif _isStringEqual "${presetName}" 'ytd-mgmt' ; then
		createTmuxSession_ytd-mgmt && doneScript
	elif _isStringEqual "${presetName}" 'ramka' ; then
		createTmuxSession_ramka && doneScript
	elif _isStringEqual "${presetName}" 'react' ; then
		createTmuxSession_react && doneScript
	else
		_errorExit "Not found tmux preset session name: ${presetName}"
	fi
}

doneScript() {
  _echoIt "Created session from preset: ${_cy}${presetName}${_ce}"
  _echoIt "Switch or attach (tmux a -t <session-name>) created session!" && \
	_echoDone
}

checkIfNamePassed() {
	if _isStringEmpty "${presetName}" ; then
		_errorExit "Not passed preset of session name. Abort!"
	fi
}

errorExitNoVarSourced() {
  _errorExit "${_pName} - error: \$$1 not sourced. Check out qyadr dotfiles. Abort!"
}

checkIfSessionNoExists() {
	tmux has-session -t "$1" > /dev/null 2>&1
		#  extra msg to dev/null
		# -t target session
	if [ ! $? == 0 ] ; then
    # echo 'session not exists so it returns 0 so true'
		return 0
  else
    # echo 'session exists so it returns 1 so false'
    return 1
	fi
}

switchExistedSession() {
	tmux switch -t "$1"
}

checkVar_bashdevPath() {
  if _isStringEmpty "${bashdevPath}"; then
    errorExitNoVarSourced 'bashdevPath'
  fi
}

checkVar_qyadr_localPath() {
  if _isStringEmpty "${qyadr_localPath}"; then
    errorExitNoVarSourced 'qyadr_localPath'
  fi
}

checkVar_qnnbPath() {
  if _isStringEmpty "${qnnbPath}"; then
    errorExitNoVarSourced 'qnnbPath'
  fi
}

checkVar_tiljsPath() {
  if _isStringEmpty "${tiljsPath}"; then
    errorExitNoVarSourced 'tiljsPath'
  fi
}

checkVar_ramkaPath() {
  if _isStringEmpty "${ramkaPath}"; then
    errorExitNoVarSourced 'ramkaPath'
  fi
}

checkVar_reactPath() {
  if _isStringEmpty "${reactPath}"; then
    errorExitNoVarSourced 'reactPath'
  fi
}

checkVar_arch_bootstrapPath() {
  if _isStringEmpty "${arch_bootstrapPath}"; then
    errorExitNoVarSourced 'arch_bootstrapPath'
  fi
}

checkVar_f_mgmtPath() {
  if _isStringEmpty "${f_mgmtPath}"; then
    errorExitNoVarSourced 'f_mgmtPath'
  fi
}

checkVar_ytd_mgmtPath() {
  if _isStringEmpty "${ytd_mgmtPath}"; then
    errorExitNoVarSourced 'ytd_mgmtPath'
  fi
}

checkVar_photo_mgmtPath() {
  if _isStringEmpty "${photo_mgmtPath}"; then
    errorExitNoVarSourced 'photo_mgmtPath'
  fi
}

createTmuxSession_bashdev() {
  checkVar_bashdevPath
  checkVar_qyadr_localPath
  checkVar_qnnbPath
  #TODO: fix strange bug. only for bashdev. scripts is good; sends correct commands; sth. wrong with tmux. check it out on arch on newer version of tmux!
  if checkIfSessionNoExists "${presetName}"; then
    tmux-create "${presetName}"
    tmux-add --remotely "${presetName}" "${presetName}" "${bashdevPath}"
    tmux-add --remotely "${presetName}" "qyadr" "${qyadr_localPath}"
    tmux-add --remotely "${presetName}" "qnnb" "${qnnbPath}"
  else
    switchExistedSession "${presetName}"
  fi
}

createTmuxSession_linux() {
  checkVar_qyadr_localPath
  checkVar_arch_bootstrapPath
  checkVar_qnnbPath
  if checkIfSessionNoExists "${presetName}"; then
    tmux-create "${presetName}"
    tmux-add --remotely "${presetName}" "qyadr" "${qyadr_localPath}"
    tmux-add --remotely "${presetName}" "arch-bootstrap" "${arch_bootstrapPath}"
    tmux-add --remotely "${presetName}" "qnnb" "${qnnbPath}"
  else
    switchExistedSession "${presetName}"
  fi
}

createTmuxSession_f-mgmt() {
  checkVar_qnnbPath
  checkVar_f_mgmtPath
  checkVar_photo_mgmtPath
  if checkIfSessionNoExists "${presetName}"; then
    tmux-create "${presetName}"
    tmux-add --remotely "${presetName}" "${presetName}" "${f_mgmtPath}"
    tmux-add --remotely "${presetName}" "qnnb" "${qnnbPath}"
    tmux-add --remotely "${presetName}" "photo-mgmt" "${photo_mgmtPath}"
    tmux send-keys -t "${presetName}":1 "cd ${f_mgmtPath}" C-m
  else
    switchExistedSession "${presetName}"
  fi
}

createTmuxSession_ytd-mgmt() {
  checkVar_qnnbPath
  checkVar_ytd_mgmtPath
  if checkIfSessionNoExists "${presetName}"; then
    tmux-create "${presetName}"
    tmux-add --remotely "${presetName}" "${presetName}" "${ytd_mgmtPath}"
    tmux-add --remotely "${presetName}" "qnnb" "${qnnbPath}"
  else
    switchExistedSession "${presetName}"
  fi
}

createTmuxSession_tiljs() {
  checkVar_qnnbPath
  checkVar_tiljsPath
  if checkIfSessionNoExists "${presetName}"; then
    tmux-create "${presetName}"
    tmux-add --remotely "${presetName}" "${presetName}" "${tiljsPath}"
    tmux-add --remotely "${presetName}" "qnnb" "${qnnbPath}"
    tmux send-keys -t "${presetName}":1 "cd ${tiljsPath}" C-m
  else
    switchExistedSession "${presetName}"
  fi
}

createTmuxSession_ramka() {
  checkVar_qnnbPath
  checkVar_ramkaPath
  checkVar_tiljsPath
  if checkIfSessionNoExists "${presetName}"; then
    tmux-create "${presetName}"
    tmux-add --remotely "${presetName}" "${presetName}" "${ramkaPath}"
    tmux-add --remotely "${presetName}" "qnnb" "${qnnbPath}"
    tmux-add --remotely "${presetName}" "tiljs" "${tiljsPath}"
    tmux send-keys -t "${presetName}":1 "cd ${ramkaPath}" C-m
  else
    switchExistedSession "${presetName}"
  fi
}

createTmuxSession_react() {
  checkVar_qnnbPath
  checkVar_ramkaPath
  checkVar_tiljsPath
  if checkIfSessionNoExists "${presetName}"; then
    tmux-create "${presetName}"
    tmux-add --remotely "${presetName}" "${presetName}" "${reactPath}"
    tmux-add --remotely "${presetName}" "qnnb" "${qnnbPath}"
    tmux-add --remotely "${presetName}" "tiljs" "${tiljsPath}"
    tmux send-keys -t "${presetName}":1 "cd ${reactPath}" C-m
  else
    switchExistedSession "${presetName}"
  fi
}

# Utils:
readonly _cy=$'\033[1;33m'            # color yellow
readonly _cg=$'\033[1;32m'            # color green
readonly _ce=$'\033[0m'               # color end
readonly _cr=$'\033[0;31m'            # color red
readonly _it="[ ${_cg}✔${_ce} ]"      # icon tick
readonly _ic="[ ${_cr}✖${_ce} ]"      # icon cross

_echoItConstructor() {
  local delimiter=$1 ; local msg=$2 ; local icon=${3:-''} ; echo "${delimiter}${icon} $msg" >&2
}

_echoIt() {
   _echoItConstructor "$_pDel" "${1}" "${2}"
}

_echoDone() {
  _echoIt 'DONE' "${_it}"
  echo >&2
}

_errorExitConstructor() {
  local delimiter=$1 ; local msg=$2 ; local icon=${3:-"$_ic"} ; echo "${delimiter}${icon} ${msg}" 1>&2 ; exit 1
}

_errorExit() {
  _errorExitConstructor "${_pDel}" "${1}"
}

_isStringEqual() {
  [[ "$1" == "$2" ]]
}

_isStringEmpty() {
  local var=$1
  [[ -z $var ]]
}

main
