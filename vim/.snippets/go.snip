snippet function-test
alias funt
  func Test${1:Func}(t *testing.T) {
    t.Run("${2:...}", func(t *testing.T){
      got := $1()
      want := ${0}
      if got != want {
        t.Errorf("got '%s' - want '%s'", got, want)
      }
    })
  }

snippet test-run
alias trun
  t.Run("${2:...}", func(t *testing.T){
    ${0}
  })

snippet variable-short
alias v
	${1} := ${0}

snippet error-test
alias iferr
    if err ${1:=}= nil {
        ${1}
    }
    ${0}

snippet ok
    if ${1}ok {
        return ${0}
    }

snippet assert-string
alias asss
    func assertString(t *testing.T, got, want string) {
      t.Helper()
      if got != want {
          t.Errorf("got '%s' - want '%s'", got, want)
      }
    }

snippet assert-error
alias asse
    func assertError(t *testing.T, got, want error) {
      t.Helper()
      if got != want {
          t.Errorf("got error '%s' - want '%s'", got, want)
      }
    }

snippet switch
	switch ${1:var} {
	case ${2:value1}:
		${0}
  default:
	}

snippet if
    if ${1:condition} {
        ${0}
    }

snippet for-loop
alias for
	for ${1} {
		${0}
	}

snippet for-loop-integer
alias fori
	for ${1:i} := 0; $1 < ${2:N}; $1++ {
		${0}
	}

snippet for-loop-range
alias forr
	for ${2:key}, ${3:value} := range ${1} {
		${0}
	}

snippet main
  package main

  import (
    "fmt"
  )

  func main() {
    ${0}
  }

snippet print-f
alias pf
  fmt.Printf(${0})

snippet print-ln
alias pln
  fmt.Println(${0})

snippet struct
alias str
	type ${1:Type} struct {
		${0}
	}

snippet example-utils
alias exu
  package utils_test

  import (
    "db-github/utils"
    "fmt"
  )

  func ExampleGetPwd() {
    reults := utils.GetPwd()
    fmt.Println(reults)
    // Output: /mnt/h/devgo/src/db-github/utils
  }


snippet example-utils-unc
alias exuf
  func Example${1}() {
    reults := utils.$1()
    fmt.Println(reults)
    // Output: ${0:XXX}
  }

snippet gotcha
alias GOT
  //GOTCHA: ${0}


snippet return-true
alias rett
  return true


snippet return-false
alias retf
  return false


